c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="win")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server Native Client 10.0};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="win")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
install.packages('RODBC')
install.packages("RODBC")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
#load ODBC library
library(RODBC)
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
library(RODBC)
odbcDataSources()
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
library(RODBC)
odbcDriverConnect()
odbcDataSources()
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
#load ODBC library
library(RODBC)
odbcDataSources()
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
#load ODBC library
library(RODBC)
odbcDataSources()
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
# #load data
# data <- sqlFetch(cn, 'myTable', colnames=FALSE, rows_at_time=1000)
# #load data
# data <- sqlQuery(cn, "select * from myTable")
# status <- sqlGetResults(cn, as.is = FALSE, errors = TRUE, max = 0, buffsize = 1000000,
#                         nullstring = NA_character_, na.strings = "NA", believeNRows = TRUE, dec = getOption("dec"),
#                         stringsAsFactors = default.stringsAsFactors())
# #read with odbcQuery
# status  <- odbcQuery(cn, "select * from myTable")
# data <- odbcFetchRows(cn, max = 0, buffsize = 10000, nullstring = NA_character_, believeNRows = TRUE)
# error <- odbcGetErrMsg(cn)
### function ###
connect <- function(host, db, user=NULL, pass=NULL, platform="win" ){
# TODO: Check input paramaters and add a branch for SQL auth on windows
if(platform == "win"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,
";trusted_connection=true;Port=1433;driver={SQL Server};TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
if(platform == "mac"){
c <- odbcDriverConnect(connection=paste0("server=",host,";database=",db,";uid=",user,";pwd=",pass,
";Port=1433;driver=FreeTDS;TDS_Version=7.0;"))
if(class(c) == 'RODBC'){
writeLines("Successfilly opened connection to db")
return(c)
}else{
writeLines(paste0("Error opening connection: ", as.character(c)))
}
}
}
# rdp.csgplatform.com:5685
cn <- connect(host='localhost', db='comtrade_source', user='sa', pass='Servian1', platform="mac")
ch1 <- odbcConnect(dsn="sqlserver01", uid="sa", pwd="Servian1")
require(Rserve)
Rserve()
Rserve()
install.packages(c("boot", "gtools", "manipulate"))
head(train)
rm(list = ls()); gc()
require(data.table);require(caret);require(doMC);require(ROCR)
registerDoMC(core=3)
load('data/new/cv_data_log_extend.RData')
install.packages("manipulate")
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
ound(cor(iris[,1:4]), 2)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
pc
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3], col=iris$Species)
plot3d(pc$scores[,1:3])#, col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
plot3d(pc$scores[,1:3], col=iris$Species, main="actual species")
with(iris, table(cluster, Species))
data("iris")
# this is a little tweak so that things line up nicely later on
iris$Species <- factor(iris$Species,
levels = c("versicolor","virginica","setosa"))
head(iris)
round(cor(iris[,1:4]), 2)
pc <- princomp(iris[,1:4], cor=TRUE, scores=TRUE)
summary(pc)
plot(pc,type="lines")
biplot(pc)
library(rgl)
plot3d(pc$scores[,1:3], col=iris$Species)
text3d(pc$scores[,1:3],texts=rownames(iris))
text3d(pc$loadings[,1:3], texts=rownames(pc$loadings), col="red")
coords <- NULL
for (i in 1:nrow(pc$loadings)) {
coords <- rbind(coords, rbind(c(0,0,0),pc$loadings[i,1:3]))
}
lines3d(coords, col="red", lwd=4)
set.seed(42)
cl <- kmeans(iris[,1:4],3)
iris$cluster <- as.factor(cl$cluster)
plot3d(pc$scores[,1:3], col=iris$cluster, main="k-means clusters")
setwd('/Users/ivanliu/Downloads/Prudential-Life-Insurance-Assessment')
svmsubmit <- fread('submission_20160215_libsvm_epsilon.csv', data.table = F)
library(data.table)
svmsubmit <- fread('submission_20160215_libsvm_epsilon.csv', data.table = F)
head(svmsubmit)
a <- fread('blending/linear_0.65002.csv', data.table = F)
a$Response <- round(svmsubmit[,1])
a
range(a$Response)
a[a$Response==0, 'Response']
b <- fread('blending/submission_20160215_nnets_0.62519.csv', data.table = F)
a[a$Response==0, ]
b[a$Response==0, ]
a[a$Response==0, 'Response'] <- 1
a[a$Response==0, 'Response']
write.csv(a, 'submission_20160215_libsvm_epsilon_rounded.csv', row.names = F)
a <- fread('blending/linear_0.65002.csv', data.table = F)
b <- fread('blending/submission_20160215_nnets_0.62519.csv', data.table = F)
c <- fread('blending/submission_single_xgb_new_feat_20160204_0.66717.csv', data.table = F)
d <- fread('blending/submission_xgb_all_meta_20160211_0.66614.csv', data.table = F)
e <- fread('blending/submission_xgb_stack_20160201_1_0.67348.csv', data.table = F)
f <- fread('blending/submit_glm_0.65782.csv', data.table = F)
g <- fread('blending/submit_kappa_0.66614.csv', data.table = F)
h <- fread('blending/submit_rmse_0.66614.csv', data.table = F)
i <- fread('blending/xgb_offset_submission_2_0.67459.csv', data.table = F)
j <- fread('blending/submission_20160215_libsvm_epsilon_rounded_ 0.60496.csv', data.table = F)
setwd('/Users/ivanliu/Downloads/Prudential-Life-Insurance-Assessment')
library(data.table)
a <- fread('blending/linear_0.65002.csv', data.table = F)
b <- fread('blending/submission_20160215_nnets_0.62519.csv', data.table = F)
c <- fread('blending/submission_single_xgb_new_feat_20160204_0.66717.csv', data.table = F)
d <- fread('blending/submission_xgb_all_meta_20160211_0.66614.csv', data.table = F)
e <- fread('blending/submission_xgb_stack_20160201_1_0.67348.csv', data.table = F)
f <- fread('blending/submit_glm_0.65782.csv', data.table = F)
g <- fread('blending/submit_kappa_0.66614.csv', data.table = F)
h <- fread('blending/submit_rmse_0.66614.csv', data.table = F)
i <- fread('blending/xgb_offset_submission_2_0.67459.csv', data.table = F)
j <- fread('blending/submission_20160215_libsvm_epsilon_rounded_ 0.60496.csv', data.table = F)
head(a)
head(b)
head(c)
head(d)
head(e)
head(f)
head(g)
head(h)
head(i)
submit <- a
submit$Response <- round((a$Response * 1 +
b$Response * 1 +
c$Response * 1 +
d$Response * 1 +
e$Response * 3 +
f$Response * 1 +
g$Response * 0.5 +
h$Response * 0.5 +
i$Response * 3 +
j$Response * 1
)/13)
range(submit$Response)
table(a$Response)
table(b$Response)
table(c$Response)
table(submit$Response)
table(j$Response)
table(i$Response)
table(i$Response)
table(e$Response)
table(submit$Response)
write.csv(submit, 'submission_blend_20160216_weighted.csv', row.names = F)
setwd('/Users/ivanliu/Downloads/Prudential-Life-Insurance-Assessment')
library(data.table)
a <- fread('blending/linear_0.65002.csv', data.table = F)
b <- fread('blending/submission_20160215_nnets_0.62519.csv', data.table = F)
c <- fread('blending/submission_blend_20160216_weighted.csv', data.table = F)
# d <- fread('blending/', data.table = F)
e <- fread('blending/submission_xgb_stack_20160201_1_0.67348.csv', data.table = F)
f <- fread('blending/submit_glm_0.65782.csv', data.table = F)
# g <- fread('blending/', data.table = F)
# h <- fread('blending/', data.table = F)
i <- fread('blending/xgb_offset_submission_2_0.67459.csv', data.table = F)
j <- fread('blending/submission_20160215_libsvm_epsilon_rounded 0.60496.csv', data.table = F)
head(a)
head(b)
head(c)
head(d)
head(e)
head(f)
head(g)
head(h)
head(i)
submit <- a
submit$Response <- round((a$Response * 1 +
b$Response * 1 +
c$Response * 2 +
# d$Response * 1 +
e$Response * 2 +
f$Response * 1 +
# g$Response * 0.5 +
# h$Response * 0.5 +
i$Response * 2 +
j$Response * 1
)/10)
rm(list=ls());gc()
setwd('/Users/ivanliu/Downloads/Prudential-Life-Insurance-Assessment')
library(data.table)
a <- fread('blending/linear_0.65002.csv', data.table = F)
b <- fread('blending/submission_20160215_nnets_0.62519.csv', data.table = F)
c <- fread('blending/submission_blend_20160216_weighted.csv', data.table = F)
# d <- fread('blending/', data.table = F)
e <- fread('blending/submission_xgb_stack_20160201_1_0.67348.csv', data.table = F)
f <- fread('blending/submit_glm_0.65782.csv', data.table = F)
# g <- fread('blending/', data.table = F)
# h <- fread('blending/', data.table = F)
i <- fread('blending/xgb_offset_submission_2_0.67459.csv', data.table = F)
j <- fread('blending/submission_20160215_libsvm_epsilon_rounded 0.60496.csv', data.table = F)
# head(a)
# head(b)
# head(c)
# head(d)
# head(e)
# head(f)
# head(g)
# head(h)
# head(i)
submit <- a
submit$Response <- round((a$Response * 1 +
b$Response * 1 +
c$Response * 2 +
# d$Response * 1 +
e$Response * 2 +
f$Response * 1 +
# g$Response * 0.5 +
# h$Response * 0.5 +
i$Response * 2 +
j$Response * 1
)/10)
j <- fread('blending/submission_20160215_libsvm_epsilon_rounded 0.60496.csv', data.table = F)
j <- fread('blending/submission_20160215_libsvm_epsilon_rounded_0.60496.csv', data.table = F)
rm(list=ls());gc()
setwd('/Users/ivanliu/Downloads/Prudential-Life-Insurance-Assessment')
library(data.table)
rm(list=ls());gc()
a <- fread('blending/linear_0.65002.csv', data.table = F)
b <- fread('blending/submission_20160215_nnets_0.62519.csv', data.table = F)
c <- fread('blending/submission_blend_20160216_weighted.csv', data.table = F)
# d <- fread('blending/', data.table = F)
e <- fread('blending/submission_xgb_stack_20160201_1_0.67348.csv', data.table = F)
f <- fread('blending/submit_glm_0.65782.csv', data.table = F)
# g <- fread('blending/', data.table = F)
# h <- fread('blending/', data.table = F)
i <- fread('blending/xgb_offset_submission_2_0.67459.csv', data.table = F)
j <- fread('blending/submission_20160215_libsvm_epsilon_rounded_0.60496.csv', data.table = F)
# head(a)
# head(b)
# head(c)
# head(d)
# head(e)
# head(f)
# head(g)
# head(h)
# head(i)
submit <- a
submit$Response <- round((a$Response * 1 +
b$Response * 1 +
c$Response * 2 +
# d$Response * 1 +
e$Response * 2 +
f$Response * 1 +
# g$Response * 0.5 +
# h$Response * 0.5 +
i$Response * 2 +
j$Response * 1
)/10)
range(submit$Response)
table(a$Response)
table(b$Response)
table(e$Response)
table(submit$Response)
write.csv(submit, 'submission_blend_20160216_less_weighted.csv', row.names = F)
